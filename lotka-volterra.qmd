---
title: "Lotka-Volterra Example"
subtitle: "Numerical approximations"
description: "Day 3, morning interactive session"
date: 2025-08-06
format: html
toc: true
editor_options: 
  chunk_output_type: console
---

::: {.callout-note}
## **Credit:** 
This code is closely based on the article [Numerically solving differential equations with R](https://rstudio-pubs-static.s3.amazonaws.com/32888_197d1a1896534397b67fb04e0d4899ae.html).
:::

We'll be using the following packages (aka libraries):

```{r}
#| message: false
#| warning: false
# load libraries ----
library(tidyverse)
library(deSolve)
library(kableExtra)
```

## I. The Lotka-Volterra equations

As described in lecture, the Lotka-Volterra models have been used to describe predator-prey populations.

### i. Prey equation:

$$\frac{dV}{dt}=r V-\alpha VP$$

From Wikipedia (*but parameters changed to match Nicholas Gotelli's, [A Primer of Ecology](https://global.oup.com/academic/product/a-primer-of-ecology-9780878933181?cc=ca&lang=en&)*): 

>"The prey are assumed to have an unlimited food supply and to reproduce exponentially, unless subject to predation; this exponential growth is represented in the equation above by the term $rV$. The rate of predation upon the prey is assumed to be proportional to the rate at which the predators and the prey meet, this is represented above by $\alpha VP$. If either $V$ or $P$ is zero, then there can be no predation."

### iii. Predator equation:

$$\frac{dP}{dt}=\beta VP - qP$$

From Wikipedia (*but parameters changed to match Nicholas Gotelli's, [A Primer of Ecology](https://global.oup.com/academic/product/a-primer-of-ecology-9780878933181?cc=ca&lang=en&)*): 

>"In this equation, $\beta VP$ represents the growth of the predator population. (Note the similarity to the predation rate; however, a different constant is used, as the rate at which the predator population grows is not necessarily equal to the rate at which it consumes the prey). The term $qP$ represents the loss rate of the predators due to either natural death or emigration, it leads to an exponential decay in the absence of prey."

**Where:**

-   $V$ is prey (**V**ictim) population (e.g. rabbits)
-   $P$ is **P**redator population (e.g. wolves)
-   $r, \alpha, \beta, q$ are positive parameters
    - $r$: intrinsic rate of increase of the prey population
    - $\alpha$: capture efficiency i.e. the effect of a predator on the per capita growth rate of the prey population
    - $\beta$: measure of conversion efficiency i.e. the abiliity of predators to convert each new prey into additional per capita growth rate for the predator population
    - $q$: per capita death rate of the predator population

### iii. Solving in R:

To find an approximate solution in R, we will need four things: 

- Parameter values 
- A sequence of times over which we'll approximate predator & prey populations 
- An initial condition (initial populations of predator & prey at $t = 0$) 
- The differential equations that need to be solved

#### Solving the Lotka-Volterra equation:

```{r}
# Create a sequence of times (days) ----
time <- seq(from = 0, to = 50, by = 0.05)

# Set some parameter values (these can change - keep it in mind) ----
parameters <- c(r = .75, alpha = 0.8, beta = 0.5, q = 1)

# Set the initial condition (prey and predator populations at t = 0) ----
# Recall: V = prey, P = predator
init_cond <- c(V = 10, P = 4)

# Prepare the series of differential equations as a function ----
lv_equations <- function(time, init_cond, parameters) {
  with(as.list(c(init_cond, parameters)), {
    dVdt = r * V - alpha * V * P
    dPdt = beta * V * P - q * P
    return(list(c(dVdt, dPdt)))
  })
}

# Find the approximate the solution using `deSolve::ode()` ----
approx_lv <- ode(y = init_cond, times = time, func = lv_equations, parms = parameters)

# Check the class ----
class(approx_lv)

# We really want this to be a data frame, AND we want both prey (V) and predator (P) to be in the same column -- we'll learn why in EDS 221 (tidy data) ----
approx_lk_df <- data.frame(approx_lv) |> 
  pivot_longer(cols = c(V, P), names_to = "species", values_to = "population")

# Plot it ----
ggplot(data = approx_lk_df, aes(x = time, y = population)) +
  geom_line(aes(color = species), linewidth = 1.2)
```

### iv. Try updating initial conditions and / or parameters

What happens as you change the initial conditions and / or parameters (and re-run the entire code chunk)? How does that align with what you see in the graph? 

It can be helpful to change just **one** value at a time and observe it's effects -- do the changes in predator / prey dynamics make sense, based on your changes?
